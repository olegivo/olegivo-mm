#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oleg_ivo.MeloManager.MediaObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MeloManager")]
	public partial class MediaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMediaContainer(MediaContainer instance);
    partial void UpdateMediaContainer(MediaContainer instance);
    partial void DeleteMediaContainer(MediaContainer instance);
    partial void InsertMediaContainersParentChild(MediaContainersParentChild instance);
    partial void UpdateMediaContainersParentChild(MediaContainersParentChild instance);
    partial void DeleteMediaContainersParentChild(MediaContainersParentChild instance);
    #endregion
		
		public MediaDataContext() : 
				base(global::Oleg_ivo.MeloManager.MediaObjects.Properties.Settings.Default.MeloManagerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MediaContainer> MediaContainers
		{
			get
			{
				return this.GetTable<MediaContainer>();
			}
		}
		
		public System.Data.Linq.Table<MediaContainersParentChild> MediaContainersParentChilds
		{
			get
			{
				return this.GetTable<MediaContainersParentChild>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaContainer")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="MediaContainer", Type=typeof(MediaContainer), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Playlist", Type=typeof(Playlist))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="MediaFile", Type=typeof(MediaFile))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Category", Type=typeof(Category))]
	public partial class MediaContainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Type;
		
		private string _Name;
		
		private bool _IsRepaired;
		
		private EntitySet<MediaContainersParentChild> _ParentMediaContainers;
		
		private EntitySet<MediaContainersParentChild> _ChildMediaContainers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsRepairedChanging(bool value);
    partial void OnIsRepairedChanged();
    #endregion
		
		public MediaContainer()
		{
			this._ParentMediaContainers = new EntitySet<MediaContainersParentChild>(new Action<MediaContainersParentChild>(this.attach_ParentMediaContainers), new Action<MediaContainersParentChild>(this.detach_ParentMediaContainers));
			this._ChildMediaContainers = new EntitySet<MediaContainersParentChild>(new Action<MediaContainersParentChild>(this.attach_ChildMediaContainers), new Action<MediaContainersParentChild>(this.detach_ChildMediaContainers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsDiscriminator=true)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRepaired", DbType="Bit NOT NULL")]
		public bool IsRepaired
		{
			get
			{
				return this._IsRepaired;
			}
			set
			{
				if ((this._IsRepaired != value))
				{
					this.OnIsRepairedChanging(value);
					this.SendPropertyChanging();
					this._IsRepaired = value;
					this.SendPropertyChanged("IsRepaired");
					this.OnIsRepairedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaContainer_MediaContainersParentChild", Storage="_ParentMediaContainers", ThisKey="Id", OtherKey="ChildId")]
		internal EntitySet<MediaContainersParentChild> ParentMediaContainers
		{
			get
			{
				return this._ParentMediaContainers;
			}
			set
			{
				this._ParentMediaContainers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaContainer_MediaContainersParentChild1", Storage="_ChildMediaContainers", ThisKey="Id", OtherKey="ParentId")]
		internal EntitySet<MediaContainersParentChild> ChildMediaContainers
		{
			get
			{
				return this._ChildMediaContainers;
			}
			set
			{
				this._ChildMediaContainers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParentMediaContainers(MediaContainersParentChild entity)
		{
			this.SendPropertyChanging();
			entity.ChildMediaContainer = this;
		}
		
		private void detach_ParentMediaContainers(MediaContainersParentChild entity)
		{
			this.SendPropertyChanging();
			entity.ChildMediaContainer = null;
		}
		
		private void attach_ChildMediaContainers(MediaContainersParentChild entity)
		{
			this.SendPropertyChanging();
			entity.ParentMediaContainer = this;
		}
		
		private void detach_ChildMediaContainers(MediaContainersParentChild entity)
		{
			this.SendPropertyChanging();
			entity.ParentMediaContainer = null;
		}
	}
	
	public partial class Playlist : MediaContainer
	{
		
		private long _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public Playlist()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
	}
	
	public partial class MediaFile : MediaContainer
	{
		
		private long _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public MediaFile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
	}
	
	public partial class Category : MediaContainer
	{
		
		private long _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public Category()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaContainersParentChild")]
	public partial class MediaContainersParentChild : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ParentId;
		
		private long _ChildId;
		
		private EntityRef<MediaContainer> _ChildMediaContainer;
		
		private EntityRef<MediaContainer> _ParentMediaContainer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentIdChanging(long value);
    partial void OnParentIdChanged();
    partial void OnChildIdChanging(long value);
    partial void OnChildIdChanged();
    #endregion
		
		public MediaContainersParentChild()
		{
			this._ChildMediaContainer = default(EntityRef<MediaContainer>);
			this._ParentMediaContainer = default(EntityRef<MediaContainer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._ParentMediaContainer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ChildId
		{
			get
			{
				return this._ChildId;
			}
			set
			{
				if ((this._ChildId != value))
				{
					if (this._ChildMediaContainer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildIdChanging(value);
					this.SendPropertyChanging();
					this._ChildId = value;
					this.SendPropertyChanged("ChildId");
					this.OnChildIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaContainer_MediaContainersParentChild", Storage="_ChildMediaContainer", ThisKey="ChildId", OtherKey="Id", IsForeignKey=true)]
		internal MediaContainer ChildMediaContainer
		{
			get
			{
				return this._ChildMediaContainer.Entity;
			}
			set
			{
				MediaContainer previousValue = this._ChildMediaContainer.Entity;
				if (((previousValue != value) 
							|| (this._ChildMediaContainer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildMediaContainer.Entity = null;
						previousValue.ParentMediaContainers.Remove(this);
					}
					this._ChildMediaContainer.Entity = value;
					if ((value != null))
					{
						value.ParentMediaContainers.Add(this);
						this._ChildId = value.Id;
					}
					else
					{
						this._ChildId = default(long);
					}
					this.SendPropertyChanged("ChildMediaContainer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaContainer_MediaContainersParentChild1", Storage="_ParentMediaContainer", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		internal MediaContainer ParentMediaContainer
		{
			get
			{
				return this._ParentMediaContainer.Entity;
			}
			set
			{
				MediaContainer previousValue = this._ParentMediaContainer.Entity;
				if (((previousValue != value) 
							|| (this._ParentMediaContainer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentMediaContainer.Entity = null;
						previousValue.ChildMediaContainers.Remove(this);
					}
					this._ParentMediaContainer.Entity = value;
					if ((value != null))
					{
						value.ChildMediaContainers.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(long);
					}
					this.SendPropertyChanged("ParentMediaContainer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
